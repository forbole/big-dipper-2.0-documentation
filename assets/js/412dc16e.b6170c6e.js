"use strict";(self.webpackChunkbig_dipper_2_0_docs=self.webpackChunkbig_dipper_2_0_docs||[]).push([[498],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,g=m["".concat(l,".").concat(u)]||m[u]||c[u]||r;return n?a.createElement(g,s(s({ref:t},d),{},{components:n})):a.createElement(g,s({ref:t},d))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4697:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={title:"Custom Tx Messages",sidebar_position:2},s=void 0,i={unversionedId:"cosmos-based/frontend/customisations/tx",id:"cosmos-based/frontend/customisations/tx",title:"Custom Tx Messages",description:"By default, message types that don't exist on the base chain (cosmos in this case) will be displayed as unknown but you can easily customize your own by doing the following:",source:"@site/docs/cosmos-based/frontend/customisations/tx.md",sourceDirName:"cosmos-based/frontend/customisations",slug:"/cosmos-based/frontend/customisations/tx",permalink:"/cosmos-based/frontend/customisations/tx",draft:!1,tags:[],version:"current",lastUpdatedAt:1682405329,formattedLastUpdatedAt:"Apr 25, 2023",sidebarPosition:2,frontMatter:{title:"Custom Tx Messages",sidebar_position:2},sidebar:"mySidebar",previous:{title:"Setup",permalink:"/cosmos-based/frontend/setup"},next:{title:"Chain Config Reference",permalink:"/cosmos-based/frontend/chain-config"}},l={},p=[{value:"Create Tx Model",id:"create-tx-model",level:2},{value:"Set i18n Content",id:"set-i18n-content",level:2},{value:"Create UI Component",id:"create-ui-component",level:2},{value:"Update Utils",id:"update-utils",level:2},{value:"Update Message Filter",id:"update-message-filter",level:2}],d={toc:p},m="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"By default, message types that don't exist on the base chain (cosmos in this case) will be displayed as ",(0,o.kt)("inlineCode",{parentName:"p"},"unknown")," but you can easily customize your own by doing the following:"),(0,o.kt)("h2",{id:"create-tx-model"},"Create Tx Model"),(0,o.kt)("p",null,"Setup a class model in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/ui/src/models/msg/<module>"),". We have separated all tx msgs by their corresponding chain module making it easy to associate."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"All class messages ",(0,o.kt)("strong",{parentName:"p"},"must")," contain the following:"),(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"category")," (module)"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"type")," (message type)"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"json")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"fromJson")," static method"))),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"class MsgUnjail {\n  public category: Categories; // required\n  public type: string; // required\n  public json: object; // required\n  public validatorAddress: string;\n\n  constructor(payload: object) {\n    this.category = 'slashing'; // required\n    this.type = R.pathOr('', ['type'], payload); // required\n    this.validatorAddress = R.pathOr('', ['validatorAddress'], payload);\n    this.json = R.pathOr({}, ['json'], payload); // required\n  }\n\n  static fromJson(json: object): MsgUnjail {\n    return {\n      category: 'slashing',\n      json,\n      type: R.pathOr('', ['@type'], json),\n      validatorAddress: R.pathOr('', ['validator_addr'], json),\n    };\n  }\n}\n")),(0,o.kt)("p",null,"Export your model in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/ui/src/models/index.ts"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export { default as MsgUnjail } from '@/models/msg/slashing/msg_unjail';\n")),(0,o.kt)("h2",{id:"set-i18n-content"},"Set i18n Content"),(0,o.kt)("p",null,"Create legible label in ",(0,o.kt)("inlineCode",{parentName:"p"},"apps/web-examplenet/public/locales/<lang>/message_labels.json")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'"txUnjailLabel": "Unjail"\n')),(0,o.kt)("p",null,"Create legible content in ",(0,o.kt)("inlineCode",{parentName:"p"},"apps/web-examplenet/public/locales/<lang>/message_contents.json")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'"txUnjailContent": "<0>{{validator}}</0> unjailed"\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"We are using ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://www.npmjs.com/package/next-i18next"},"next-i18next")),".")),(0,o.kt)("h2",{id:"create-ui-component"},"Create UI Component"),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/ui/src/components/msg/slashing/unjail/index.tsx")," create a corresponding component for your newly created model."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import Typography from '@mui/material/Typography';\nimport { Trans } from 'next-i18next';\nimport { FC } from 'react';\nimport Name from '@/components/name';\nimport { type MsgUnjail } from '@/models';\nimport { useProfileRecoil } from '@/recoil/profiles/hooks';\n\nconst Unjail: FC<{ message: MsgUnjail }> = (props) => {\n  const { message } = props;\n  const validator = useProfileRecoil(message.validatorAddress);\n  const validatorMoniker = validator ? validator?.name : message.validatorAddress;\n\n  return (\n    <Typography>\n      <Trans\n        i18nKey=\"message_contents:txUnjailContent\"\n        components={[<Name address={message.validatorAddress} name={validatorMoniker} />]}\n      />\n    </Typography>\n  );\n};\n\nexport default Unjail;\n")),(0,o.kt)("p",null,"Import and export your component in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/ui/src/components/msg/index.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export { default as Unjail } from '@/components/msg/slashing/unjail';\n")),(0,o.kt)("h2",{id:"update-utils"},"Update Utils"),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"src/components/msg/utils.tsx")," go to ",(0,o.kt)("inlineCode",{parentName:"p"},"customTypeToModel")," and add your model in the following format"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"<message type>: {\n  model: <Model>,\n  content: <Component>,\n  tagTheme: <tag color>,\n  tagDisplay: <tag value>,\n}\n\n## example\n\n'/cosmos.slashing.v1beta1.MsgUnjail': {\n  model: MODELS.MsgUnjail,\n  content: COMPONENTS.Unjail,\n  tagTheme: 'five',\n  tagDisplay: 'txUnjailLabel',\n}\n")),(0,o.kt)("p",null,"Your newly added transaction message should be showing up correctly."),(0,o.kt)("h2",{id:"update-message-filter"},"Update Message Filter"),(0,o.kt)("p",null,"Edit the utils file in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/ui/src/components/transaction_messages_filter/utils.tsx"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"key")," value must exist in ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/ui/src/models/msg/types/index.ts"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"export const getFilterLabels = () => {\n  return ([\n    {\n      key: 'none',\n      display: 'none',\n    },\n    {\n      key: 'bank',\n      display: 'bank',\n    },\n    {\n      key: 'others',\n      display: 'others',\n    },\n    ...\n  ]);\n};\n")))}c.isMDXComponent=!0}}]);